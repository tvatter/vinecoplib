<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="overview-vinecop" kind="page">
    <compoundname>overview-vinecop</compoundname>
    <title>Vine copula models</title>
    <detaileddescription>
<para>Vine copula models are implemented in the class <computeroutput>Vinecop</computeroutput>. To use this class in your code, include the header include the header <computeroutput><ref refid="vinecop_2class_8hpp_source" kindref="compound">vinecopulib/vinecop/class.hpp</ref></computeroutput> (or simply <computeroutput><ref refid="vinecopulib_8hpp_source" kindref="compound">vinecopulib.hpp</ref></computeroutput>) at the top of your source file. This automatically enables all features for bivariate copula models.</para><sect1 id="overview-vinecop_1vinecop-custom">
<title>Set up a custom vine copula model</title>
<para>Custom models can be created through the constructor of <computeroutput>Vinecop</computeroutput>. A model is represented by a <computeroutput>std::vector&lt;std::vector&lt;Bicop&gt;&gt;</computeroutput> containing all pair-copulas and an <ulink url="#how-to-read-an-r-vine-matrix">R-vine matrix</ulink>.</para><para>Similarly to bivariate copulas, there are essentially two ways of setting-up vine copulas:<itemizedlist>
<listitem><para>with known parameters,</para></listitem><listitem><para>from data (i.e., with estimated parameters).</para></listitem></itemizedlist>
</para><para>The constructor with known parameters has two versions:<itemizedlist>
<listitem><para>one for which the only argument is the dimension, allowing to set-up a D-vine with only independence copulas,</para></listitem><listitem><para>and one for which the two arguments are a matrix of integers (i.e., and <ulink url="#how-to-read-an-r-vine-matrix">R-vine matrix</ulink>) and a <computeroutput>std::vector&lt;std::vector&lt;Bicop&gt;&gt;</computeroutput> containing all pair-copulas.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">//<sp/>specify<sp/>the<sp/>dimension<sp/>of<sp/>the<sp/>model</highlight></codeline>
<codeline><highlight class="normal">int<sp/>d<sp/>=<sp/>3;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>instantiate<sp/>a<sp/>three<sp/>dimensional<sp/>D-vine<sp/>with<sp/>independence<sp/>copulas</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>default_model(d);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>alternatively,<sp/>instantiate<sp/>a<sp/>std::vector&lt;std::vector&lt;Bicop&gt;&gt;<sp/>object</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>pair_copulas<sp/>=<sp/>Vinecop::make_pair_copula_store(d);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>specify<sp/>the<sp/>pair<sp/>copulas</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>par<sp/>=<sp/>Eigen::VectorXd::Constant(1,<sp/>3.0);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(auto&amp;<sp/>tree<sp/>:<sp/>pair_copulas)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto&amp;<sp/>pc<sp/>:<sp/>tree)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc<sp/>=<sp/>Bicop(BicopFamily::clayton,<sp/>270,<sp/>par);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>specify<sp/>a<sp/>structure<sp/>matrix</highlight></codeline>
<codeline><highlight class="normal">Eigen::Matrix&lt;size_t,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/>mat(3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">mat<sp/>&lt;&lt;<sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>2,<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>0,<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>instantiate<sp/>the<sp/>custom<sp/>model</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>custom_model(pair_copulas,<sp/>mat);</highlight></codeline>
</programlisting> The constructors from data take the same arguments as the two select methods described <ulink url="#vinecop-fit">below</ulink>.</para></sect1>
<sect1 id="overview-vinecop_1vinecop-matrix">
<title>How to read the R-vine matrix</title>
<para>The R-vine matrix notation in vinecopulib is different from the one in VineCopula. An exemplary array is <programlisting><codeline><highlight class="normal">4<sp/>4<sp/>4<sp/>4</highlight></codeline>
<codeline><highlight class="normal">3<sp/>3<sp/>3</highlight></codeline>
<codeline><highlight class="normal">2<sp/>2</highlight></codeline>
<codeline><highlight class="normal">1</highlight></codeline>
</programlisting> which encodes the following pair-copulas: <programlisting><codeline><highlight class="normal">|<sp/>tree<sp/>|<sp/>edge<sp/>|<sp/>pair-copulas<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|------|------|----------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>0<sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/>|<sp/>`(1,<sp/>4)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/>|<sp/>`(2,<sp/>4)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>2<sp/><sp/><sp/><sp/>|<sp/>`(3,<sp/>4)`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>1<sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/>|<sp/>`(1,<sp/>3;<sp/>4)`<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/>|<sp/>`(2,<sp/>3;<sp/>4)`<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>2<sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/>|<sp/>`(1,<sp/>2;<sp/>3,<sp/>4)`<sp/>|</highlight></codeline>
</programlisting> Denoting by <computeroutput>M[i, j]</computeroutput> the matrix entry in row <computeroutput>i</computeroutput> and column <computeroutput>j</computeroutput>, the pair-copula index for edge <computeroutput>e</computeroutput> in tree <computeroutput>t</computeroutput> of a <computeroutput>d</computeroutput> dimensional vine is <computeroutput>(M[d - 1 - t, e], M[t, e]; M[t - 1, e], ..., M[0, e])</computeroutput>. Less formally,<orderedlist>
<listitem><para>Start with the counter-diagonal element of column <computeroutput>e</computeroutput> (first conditioned variable).</para></listitem><listitem><para>Jump up to the element in row <computeroutput>t</computeroutput> (second conditioned variable).</para></listitem><listitem><para>Gather all entries further up in column <computeroutput>e</computeroutput> (conditioning set).</para></listitem></orderedlist>
</para><para>A valid R-vine matrix must satisfy several conditions which are checked when <computeroutput>RVineStructure()</computeroutput> is called:<orderedlist>
<listitem><para>The lower right triangle must only contain zeros.</para></listitem><listitem><para>The upper left triangle can only contain numbers between 1 and d.</para></listitem><listitem><para>The antidiagonal must contain the numbers 1, ..., d.</para></listitem><listitem><para>The antidiagonal entry of a column must not be contained in any column further to the right.</para></listitem><listitem><para>The entries of a column must be contained in all columns to the left.</para></listitem><listitem><para>The proximity condition must hold: For all t = 1, ..., d - 2 and e = 0, ..., d - t - 1 there must exist an index j &gt; d, such that <computeroutput>(M[t, e], {M[0, e], ..., M[t-1, e]})</computeroutput> equals either <computeroutput>(M[d-j-1, j], {M[0, j], ..., M[t-1, j]})</computeroutput> or <computeroutput>(M[t-1, j], {M[d-j-1, j], M[0, j], ..., M[t-2, j]})</computeroutput>.</para></listitem></orderedlist>
</para></sect1>
<sect1 id="overview-vinecop_1vinecop-fit">
<title>Fit and select a vine copula model</title>
<para>The method <computeroutput>select_all()</computeroutput> performs parameter estimation and automatic model selection when the vine structure is unknown (i.e., it modifies the structure of the object), using the sequential procedure proposed by <ulink url="https://mediatum.ub.tum.de/doc/1079277/1079277.pdf">Dissman et al. (2013)</ulink>. Alternatively, <computeroutput>select_families()</computeroutput> performs parameter estimation and automatic model selection for a known structure (i.e., using the structure of the object). In both cases, the only mandatory argument is the data (stored in a <computeroutput>Eigen::MatrixXd</computeroutput>), while controls argument allow for customization of the fit. <programlisting><codeline><highlight class="normal">//<sp/>specify<sp/>the<sp/>dimension<sp/>of<sp/>the<sp/>model</highlight></codeline>
<codeline><highlight class="normal">int<sp/>d<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>simulate<sp/>dummy<sp/>data</highlight></codeline>
<codeline><highlight class="normal">Eigen::MatrixXd<sp/>data<sp/>=<sp/>tools_stats::simulate_uniform(100,<sp/>d);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>instantiate<sp/>a<sp/>D-vine<sp/>and<sp/>select<sp/>the<sp/>families</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>model(d);</highlight></codeline>
<codeline><highlight class="normal">model.select_families(data);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>alternatively,<sp/>select<sp/>the<sp/>structure<sp/>along<sp/>with<sp/>the<sp/>families</highlight></codeline>
<codeline><highlight class="normal">model.select_all(data);</highlight></codeline>
</programlisting></para><para>Note that the second argument to <computeroutput>select_all()</computeroutput> and <computeroutput>select_families()</computeroutput> is similar to the one of <computeroutput>select()</computeroutput> for <computeroutput>Bicop</computeroutput> objects. Objects of the class <computeroutput>FitControlsVinecop</computeroutput> inherit from <computeroutput>FitControlsBicop</computeroutput> and extend them with additional data members to control the structure selection:<itemizedlist>
<listitem><para><computeroutput>size_t trunc_lvl</computeroutput> describes the tree after which <computeroutput>family_set</computeroutput> is set to <computeroutput>{BicopFamily::indep}</computeroutput>. In other words, all pair copulas in trees lower than <computeroutput>trunc_lvl</computeroutput> (default to none) are &quot;selected&quot; as independence copulas.</para></listitem><listitem><para><computeroutput>std::string tree_criterion</computeroutput> describes the criterion used to construct the minimum spanning tree (see <ulink url="https://mediatum.ub.tum.de/doc/1079277/1079277.pdf">Dissman et al. (2013)</ulink>). It can take <computeroutput>&quot;tau&quot;</computeroutput> (default) for Kendall&apos;s tau, <computeroutput>&quot;rho&quot;</computeroutput> for Spearman&apos;s rho, or <computeroutput>&quot;hoeffd&quot;</computeroutput> for Hoeffding&apos;s D (suited for non-monotonic relationships).</para></listitem><listitem><para><computeroutput>double threshold</computeroutput> describes a value (default is 0) of <computeroutput>tree_criterion</computeroutput> under which the corresponding pair-copula is set to independence.</para></listitem><listitem><para><computeroutput>bool select_trunc_lvl</computeroutput> can be set to true to select the truncation level automatically (default is <computeroutput>false</computeroutput>).</para></listitem><listitem><para><computeroutput>bool select_threshold</computeroutput> can be set to true to select the threshold parameter automatically (default is <computeroutput>false</computeroutput>).</para></listitem><listitem><para><computeroutput>size_t num_threads</computeroutput> number of threads to run in parallel when fitting pair copulas within one tree.</para></listitem></itemizedlist>
</para><para>As mentioned <ulink url="#set-up-a-custom-vine-copula-model">above</ulink>, the arguments of <computeroutput>select_all()</computeroutput> and <computeroutput>select_families()</computeroutput> can be used as arguments to a constructor allowing to instantiate a new object directly:</para><para><programlisting><codeline><highlight class="normal">//<sp/>specify<sp/>the<sp/>dimension<sp/>of<sp/>the<sp/>model</highlight></codeline>
<codeline><highlight class="normal">int<sp/>d<sp/>=<sp/>4;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>simulate<sp/>dummy<sp/>data</highlight></codeline>
<codeline><highlight class="normal">Eigen::MatrixXd<sp/>data<sp/>=<sp/>simulate_uniform(100,<sp/>d);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>instantiate<sp/>a<sp/>vine<sp/>from<sp/>data<sp/>using<sp/>the<sp/>default<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>best_vine(data);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>alternatively,<sp/>instantiate<sp/>a<sp/>structure<sp/>matrix...</highlight></codeline>
<codeline><highlight class="normal">Eigen::Matrix&lt;size_t,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/>M;</highlight></codeline>
<codeline><highlight class="normal">M<sp/>&lt;&lt;<sp/>1,<sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>2,<sp/>2,<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>3,<sp/>0,<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/>0,<sp/>0,<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>...<sp/>and<sp/>instantiate<sp/>a<sp/>vine<sp/>copula<sp/>from<sp/>data<sp/>using<sp/>the<sp/>custom<sp/>structure,</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Kendall&apos;s<sp/>tau<sp/>inversion<sp/>for<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">//<sp/>estimation<sp/>and<sp/>a<sp/>truncation<sp/>after<sp/>the<sp/>second<sp/>tree</highlight></codeline>
<codeline><highlight class="normal">FitControlsVinecop<sp/>controls(bicop_families::itau,<sp/>&quot;itau&quot;);</highlight></codeline>
<codeline><highlight class="normal">controls.set_trunc_lvl(2);</highlight></codeline>
<codeline><highlight class="normal">controls.set_num_threads(4);<sp/><sp/>//<sp/>parallelize<sp/>with<sp/>4<sp/>threads</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>custom_vine(data,<sp/>M,<sp/>controls);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="overview-vinecop_1vinecop-work">
<title>Work with a vine copula model</title>
<para>You can simulate from a vine copula model, evaluate its density, distribution, log-likelihood, AIC and BIC.</para><para><programlisting><codeline><highlight class="normal">//<sp/>5-dimensional<sp/>independence<sp/>vine</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>model(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>simulate<sp/>100<sp/>observations</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>data<sp/>=<sp/>model.simulate(100)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>evaluate<sp/>the<sp/>density</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>pdf<sp/>=<sp/>model.pdf(data)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>evaluate<sp/>the<sp/>distribution</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>cdf<sp/>=<sp/>model.cdf(data)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>evaluate<sp/>the<sp/>log-likelihood</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>ll<sp/>=<sp/>model.loglik(data)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>evaluate<sp/>the<sp/>AIC</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>aic<sp/>=<sp/>model.aic(data)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>evaluate<sp/>the<sp/>BIC</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>bic<sp/>=<sp/>model.bic(data)</highlight></codeline>
</programlisting></para><para>Vine copula models can also be written to and constructed from JSON files and <computeroutput>boost::property_tree::ptree</computeroutput> objects:</para><para><programlisting><codeline><highlight class="normal">//<sp/>5-dimensional<sp/>vine<sp/>copula</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>vinecop(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Save<sp/>as<sp/>a<sp/>ptree<sp/>object</highlight></codeline>
<codeline><highlight class="normal">boost::property_tree::ptree<sp/>vinecop_node<sp/>=<sp/>vinecop.to_ptree();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Write<sp/>into<sp/>a<sp/>JSON<sp/>file</highlight></codeline>
<codeline><highlight class="normal">boost::property_tree::write_json(&quot;myfile.JSON&quot;,<sp/>vinecop_node);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Equivalently</highlight></codeline>
<codeline><highlight class="normal">vinecop.to_json(&quot;myfile.JSON&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Then<sp/>a<sp/>new<sp/>Bicop<sp/>can<sp/>be<sp/>constructed<sp/>from<sp/>the<sp/>ptree<sp/>object</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>vinecop2(vinecop_node);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Or<sp/>from<sp/>the<sp/>JSON<sp/>file</highlight></codeline>
<codeline><highlight class="normal">Vinecop<sp/>vinecop2(&quot;myfile.JSON&quot;);</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
