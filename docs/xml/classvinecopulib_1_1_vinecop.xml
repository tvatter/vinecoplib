<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classvinecopulib_1_1_vinecop" kind="class" language="C++" prot="public">
    <compoundname>vinecopulib::Vinecop</compoundname>
    <includes refid="vinecop_2class_8hpp" local="no">class.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a5a75b825ad6091d734dc163c3277b36b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref></type>
        <definition>Bicop vinecopulib::Vinecop::get_pair_copula</definition>
        <argsstring>(size_t tree, size_t edge) const</argsstring>
        <name>get_pair_copula</name>
        <param>
          <type>size_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>extracts a pair copula. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>tree index (starting with 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index (starting with 0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="89" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="348" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a5c909eae77a38558d46d6d4b98564e57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevinecopulib_1a42e95cc06d33896199caab0c11ad44f3" kindref="member">BicopFamily</ref></type>
        <definition>BicopFamily vinecopulib::Vinecop::get_family</definition>
        <argsstring>(size_t tree, size_t edge) const</argsstring>
        <name>get_family</name>
        <param>
          <type>size_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>extracts the family of a pair copula. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>tree index (starting with 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index (starting with 0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="91" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a889a0c1c5c143e32cf34aa9bd15e33b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int vinecopulib::Vinecop::get_rotation</definition>
        <argsstring>(size_t tree, size_t edge) const</argsstring>
        <name>get_rotation</name>
        <param>
          <type>size_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>extracts the rotation of a pair copula. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>tree index (starting with 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index (starting with 0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="93" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a16872eaecac2cf3f90c7f282c453fe58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Vinecop::get_parameters</definition>
        <argsstring>(size_t tree, size_t edge) const</argsstring>
        <name>get_parameters</name>
        <param>
          <type>size_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>extracts the parameters of a pair copula. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>tree index (starting with 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index (starting with 0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="95" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="439" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a3f4cc62395a9ae4ce2b7714ceae6bde3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::get_tau</definition>
        <argsstring>(size_t tree, size_t edge) const</argsstring>
        <name>get_tau</name>
        <param>
          <type>size_t</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>extracts the Kendall&apos;s <formula id="19">$ tau $</formula> of a pair copula. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>tree index (starting with 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>edge index (starting with 0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="97" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a508971cf99ce5a94712168d10b736812" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vinecopulib::Vinecop::get_trunc_lvl</definition>
        <argsstring>() const</argsstring>
        <name>get_trunc_lvl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="99" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="453" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a5f1c76c0fd97ea586b182f7996034e86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Bicop &gt; &gt; vinecopulib::Vinecop::get_all_pair_copulas</definition>
        <argsstring>() const</argsstring>
        <name>get_all_pair_copulas</name>
        <briefdescription>
<para>extracts all pair copulas. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a nested std::vector with entry <computeroutput>[t][e]</computeroutput> corresponding to edge <computeroutput>e</computeroutput> in tree <computeroutput>t</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="102" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ab8a6a5d111b80788955438e1630f04c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacevinecopulib_1a42e95cc06d33896199caab0c11ad44f3" kindref="member">BicopFamily</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; BicopFamily &gt; &gt; vinecopulib::Vinecop::get_all_families</definition>
        <argsstring>() const</argsstring>
        <name>get_all_families</name>
        <briefdescription>
<para>extracts the families of all pair copulas. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a nested std::vector with entry <computeroutput>[t][e]</computeroutput> corresponding to edge <computeroutput>e</computeroutput> in tree <computeroutput>t</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="104" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="396" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a45dd56984cf7395494ed3fab75c62a1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; int &gt; &gt; vinecopulib::Vinecop::get_all_rotations</definition>
        <argsstring>() const</argsstring>
        <name>get_all_rotations</name>
        <briefdescription>
<para>extracts the rotations of all pair copulas. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a nested std::vector with entry <computeroutput>[t][e]</computeroutput> corresponding to edge <computeroutput>e</computeroutput> in tree <computeroutput>t</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="106" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="422" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1adbd6c2e57666bcec101bc2cc8846c78b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Eigen::MatrixXd &gt; &gt; vinecopulib::Vinecop::get_all_parameters</definition>
        <argsstring>() const</argsstring>
        <name>get_all_parameters</name>
        <briefdescription>
<para>extracts the parameters of all pair copulas. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a nested std::vector with entry <computeroutput>[t][e]</computeroutput> corresponding to edge <computeroutput>e</computeroutput> in tree <computeroutput>t</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="108" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="465" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac271e64e1b2dd16f8b5ccaecf3f03e96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; double &gt; &gt; vinecopulib::Vinecop::get_all_taus</definition>
        <argsstring>() const</argsstring>
        <name>get_all_taus</name>
        <briefdescription>
<para>extracts the Kendall&apos;s <formula id="19">$ tau $</formula>s of all pair copulas. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a nested std::vector with entry <computeroutput>[t][e]</computeroutput> corresponding to edge <computeroutput>e</computeroutput> in tree <computeroutput>t</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="110" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="483" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a27e9d72fa28b4d167dde9ae9205ec995" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vinecopulib::Vinecop::get_dim</definition>
        <argsstring>() const</argsstring>
        <name>get_dim</name>
        <briefdescription>
<para>extracts the dimension of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="113" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a4aff71e7b65688ff04205ec66b34473e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt; size_t &gt; vinecopulib::Vinecop::get_order</definition>
        <argsstring>() const</argsstring>
        <name>get_order</name>
        <briefdescription>
<para>extracts the order vector of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="115" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="505" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1aeaaad4d204e86a0df21becfa26032e47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref></type>
        <definition>RVineStructure vinecopulib::Vinecop::get_rvine_structure</definition>
        <argsstring>() const</argsstring>
        <name>get_rvine_structure</name>
        <briefdescription>
<para>extracts the structure matrix of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="117" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1aab1af57bb6b7e02029dcc3dc2a285314" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; vinecopulib::Vinecop::get_matrix</definition>
        <argsstring>() const</argsstring>
        <name>get_matrix</name>
        <briefdescription>
<para>extracts the structure matrix of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="119" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a4d0f5a7e4b60e6d58aef3020577aeb5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvinecopulib_1_1_triangular_array" kindref="compound">TriangularArray</ref>&lt; size_t &gt;</type>
        <definition>TriangularArray&lt; size_t &gt; vinecopulib::Vinecop::get_struct_array</definition>
        <argsstring>() const</argsstring>
        <name>get_struct_array</name>
        <briefdescription>
<para>extracts the above diagonal coefficients of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="121" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="526" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a1b8f3b15053e1d84b13b262e9833552d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::get_threshold</definition>
        <argsstring>() const</argsstring>
        <name>get_threshold</name>
        <briefdescription>
<para>extracts the threshold (usually zero except <computeroutput>select_threshold == TRUE</computeroutput> in <computeroutput>FitControlsVinecop()</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="124" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a1525e0fbb288182518230ede06db1801" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::get_loglik</definition>
        <argsstring>() const</argsstring>
        <name>get_loglik</name>
        <briefdescription>
<para>extracts the log-likelihood (throws an error if model has not been fitted to data). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="125" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="533" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a2260191b027249666f637dae58795a47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vinecopulib::Vinecop::get_nobs</definition>
        <argsstring>() const</argsstring>
        <name>get_nobs</name>
        <briefdescription>
<para>extracts the number of observations used for the fit. </para>        </briefdescription>
        <detaileddescription>
<para>The function throws an error if model has not been fitted to data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="126" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="544" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a08fcd0fce480d68c47932fd4d68e5478" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::get_aic</definition>
        <argsstring>() const</argsstring>
        <name>get_aic</name>
        <briefdescription>
<para>extracts the AIC. </para>        </briefdescription>
        <detaileddescription>
<para>The function throws an error if model has not been fitted to data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="127" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="555" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a29d0beb8d6c20c246c7b86f38d90e48d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::get_bic</definition>
        <argsstring>() const</argsstring>
        <name>get_bic</name>
        <briefdescription>
<para>extracts the BIC. </para>        </briefdescription>
        <detaileddescription>
<para>The function throws an error if model has not been fitted to data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="128" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="566" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ad694a38fd514fe339e00a00093b5aa33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::get_mbicv</definition>
        <argsstring>(const double psi0) const</argsstring>
        <name>get_mbicv</name>
        <param>
          <type>const double</type>
          <declname>psi0</declname>
        </param>
        <briefdescription>
<para>extracts the log-likelihood. </para>        </briefdescription>
        <detaileddescription>
<para>The function throws an error if model has not been fitted to data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="129" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="577" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a08e91a1c33e21b07d708d89adac01078" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::calculate_mbicv_penalty</definition>
        <argsstring>(const size_t nobs, const double psi0) const</argsstring>
        <name>calculate_mbicv_penalty</name>
        <param>
          <type>const size_t</type>
          <declname>nobs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>psi0</declname>
        </param>
        <briefdescription>
<para>computes the penalty term for mBICV </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="179" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="586" bodyend="620"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvinecopulib_1_1_vinecop_1aea1f8be4ac7bf48af1f186fbaf96530b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t vinecopulib::Vinecop::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="169" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_vinecop_1a1bd2b00a31f3d14d1ad51d493286f0d2" prot="private" static="no" mutable="no">
        <type><ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref></type>
        <definition>RVineStructure vinecopulib::Vinecop::vine_struct_</definition>
        <argsstring></argsstring>
        <name>vine_struct_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="170" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_vinecop_1af206b4d5e82d91f0d78b176870e422d5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;Bicop&gt; &gt; vinecopulib::Vinecop::pair_copulas_</definition>
        <argsstring></argsstring>
        <name>pair_copulas_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="171" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_vinecop_1a3ed8d7fe44fef03e738cd2561df8d58c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::threshold_</definition>
        <argsstring></argsstring>
        <name>threshold_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="172" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_vinecop_1a671f2c116ae39979f1c3a79489d247ab" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::loglik_</definition>
        <argsstring></argsstring>
        <name>loglik_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="173" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_vinecop_1ae4402f2d6c3cb7001207ede73743024d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t vinecopulib::Vinecop::nobs_</definition>
        <argsstring></argsstring>
        <name>nobs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="174" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a16aff724dab68fe606e372208abe6e0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>()</argsstring>
        <name>Vinecop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="23" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a391541e2795d06a848d5a17fe3496a63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(size_t d)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>creates a D-vine on <computeroutput>d</computeroutput> variables with all pair-copulas set to independence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension (= number of variables) of the model. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="25" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="18" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1abebc47fd9c68aeff199a3eba370a5f6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const RVineStructure &amp;vine_struct)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> &amp;</type>
          <declname>vine_struct</declname>
        </param>
        <briefdescription>
<para>creates a vine copula with structure specified by an <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> object; all pair-copulas are set to independence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vine_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> object representing the structure of the vine. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="28" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a2cb5079a1a3cfe0403969aba92092ac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;matrix, const bool check_matrix=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_matrix</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates a vine copula with structure specified by an R-vine matrix; all pair-copulas are set to independence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>an R-vine matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to check if <computeroutput>matrix</computeroutput> is a valid R-vine matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="30" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1af54ae0403aaa188052c63e959e70f90f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;order, const TriangularArray&lt; size_t &gt; &amp;struct_array, const bool check_array=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_triangular_array" kindref="compound">TriangularArray</ref>&lt; size_t &gt; &amp;</type>
          <declname>struct_array</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_array</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates a vine copula with structure specified by an R-vine matrix; all pair-copulas are set to independence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the variables in the vine structure, see <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref>&apos;s corresponding constructor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_array</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangular array object specifying the vine structure, see <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref>&apos;s corresponding constructor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_array</parametername>
</parameternamelist>
<parameterdescription>
<para>whether <computeroutput>order</computeroutput> and <computeroutput>struct_array</computeroutput> shall be checked for validity. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="33" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a6f41f3f14cd479a62bef7448c00376d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Bicop &gt;&gt; &amp;pair_copulas, const RVineStructure &amp;vine_struct)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt;&gt; &amp;</type>
          <declname>pair_copulas</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> &amp;</type>
          <declname>vine_struct</declname>
        </param>
        <briefdescription>
<para>creates an arbitrary vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pair_copulas</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> objects specifying the pair-copulas, see <ref refid="classvinecopulib_1_1_vinecop_1ac99ec5154d923ee5eb73fdad071bca46" kindref="member">make_pair_copula_store()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vine_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> object specifying the vine structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="38" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1abc94737980ef5dbdc16b7d0aa66e683d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Bicop &gt;&gt; &amp;pair_copulas, const Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;matrix, const bool check_matrix=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt;&gt; &amp;</type>
          <declname>pair_copulas</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_matrix</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates an arbitrary vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pair_copulas</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> objects specifying the pair-copulas, see <ref refid="classvinecopulib_1_1_vinecop_1ac99ec5154d923ee5eb73fdad071bca46" kindref="member">make_pair_copula_store()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>an R-vine matrix specifying the vine structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to check if <computeroutput>matrix</computeroutput> is a valid R-vine matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="41" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ae15da62d7cd3829bbd2980fe4ac190b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Bicop &gt;&gt; &amp;pair_copulas, const std::vector&lt; size_t &gt; &amp;order, const TriangularArray&lt; size_t &gt; &amp;struct_array, const bool check_array=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt;&gt; &amp;</type>
          <declname>pair_copulas</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_triangular_array" kindref="compound">TriangularArray</ref>&lt; size_t &gt; &amp;</type>
          <declname>struct_array</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_array</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates an arbitrary vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pair_copulas</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> objects specifying the pair-copulas, see <ref refid="classvinecopulib_1_1_vinecop_1ac99ec5154d923ee5eb73fdad071bca46" kindref="member">make_pair_copula_store()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the variables in the vine structure, see <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref>&apos;s corresponding constructor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_array</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangular array object specifying the vine structure, see the corresponding constructor of <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_array</parametername>
</parameternamelist>
<parameterdescription>
<para>whether <computeroutput>order</computeroutput> and <computeroutput>struct_array</computeroutput> shall be checked for validity. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="45" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a8b389e32ae8d1a2c26046a6be19040f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const FitControlsVinecop &amp;controls=FitControlsVinecop())</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref> &amp;</type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>()</defval>
        </param>
        <briefdescription>
<para>constructs a vine copula model from data by creating a model and calling <ref refid="classvinecopulib_1_1_vinecop_1a0d2fae568f3d893c1c144a8034fbaf90" kindref="member">select_all()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="21">$ n \times d $</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="51" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="227" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac8e2119b7cd9d2f67a8a62e7b4fbd61f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const RVineStructure &amp;vine_struct, FitControlsVinecop controls=FitControlsVinecop())</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> &amp;</type>
          <declname>vine_struct</declname>
        </param>
        <param>
          <type><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref></type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>()</defval>
        </param>
        <briefdescription>
<para>constructs a vine copula model from data by creating a model and calling select_family(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="21">$ n \times d $</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vine_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref> object specifying the vine structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="54" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="169" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a228e7c92a06fbf7020870eec625a0e80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;matrix, FitControlsVinecop controls=FitControlsVinecop(), const bool check_matrix=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; size_t, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref></type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_matrix</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>constructs a vine copula model from data by creating a model and calling select_family(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="21">$ n \times d $</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>either an empty matrix (default) or an R-vine structure matrix, see <ref refid="classvinecopulib_1_1_vinecop_1a5e6cacd0883811fcd80c772ace747c43" kindref="member">select_families()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to check if <computeroutput>matrix</computeroutput> is a valid R-vine matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="58" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="194" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ae91e02b92cd4af43596131cce9b085d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const std::vector&lt; size_t &gt; &amp;order, const TriangularArray&lt; size_t &gt; &amp;struct_array, FitControlsVinecop controls=FitControlsVinecop(), const bool check_array=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_triangular_array" kindref="compound">TriangularArray</ref>&lt; size_t &gt; &amp;</type>
          <declname>struct_array</declname>
        </param>
        <param>
          <type><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref></type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>()</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_array</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>constructs a vine copula model from data by creating a model and calling select_family(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="21">$ n \times d $</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>the order of the variables in the vine structure, see the corresponding constructor of <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struct_array</parametername>
</parameternamelist>
<parameterdescription>
<para>a triangular array object specifying the vine structure, see the corresponding constructor of <ref refid="classvinecopulib_1_1_r_vine_structure" kindref="compound">RVineStructure</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_array</parametername>
</parameternamelist>
<parameterdescription>
<para>whether <computeroutput>order</computeroutput> and <computeroutput>struct_array</computeroutput> shall be checked for validity. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="63" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac77c6f78b0e2c7860d7406c9ea7fe251" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const char *filename, const bool check_matrix=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_matrix</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates from a JSON file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the JSON file to read (see <ref refid="classvinecopulib_1_1_vinecop_1aaee91f92acc8402eb7358b65c8fe63f8" kindref="member">to_ptree()</ref> for the structure of the file). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to check if the <computeroutput>&quot;matrix&quot;</computeroutput> node represents a valid R-vine matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="71" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a83e7fdc7c3aef45d8431005b5d1abb83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Vinecop::Vinecop</definition>
        <argsstring>(const boost::property_tree::ptree input, const bool check_matrix=true)</argsstring>
        <name>Vinecop</name>
        <param>
          <type>const boost::property_tree::ptree</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_matrix</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>creates from a boost::property_tree::ptree object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>the boost::property_tree::ptree object to convert from (see <ref refid="classvinecopulib_1_1_vinecop_1aaee91f92acc8402eb7358b65c8fe63f8" kindref="member">to_ptree()</ref> for the structure of the input). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to check if the <computeroutput>&quot;matrix&quot;</computeroutput> node represents a valid R-vine matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="73" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="119" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1aaee91f92acc8402eb7358b65c8fe63f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::property_tree::ptree</type>
        <definition>boost::property_tree::ptree vinecopulib::Vinecop::to_ptree</definition>
        <argsstring>() const</argsstring>
        <name>to_ptree</name>
        <briefdescription>
<para>converts the copula into a boost::property_tree::ptree object. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>ptree</computeroutput> object contains two nodes : <computeroutput>&quot;matrix&quot;</computeroutput> and <computeroutput>&quot;pair copulas&quot;</computeroutput>. The former is encodes the R-Vine structure and the latter is a list of child nodes for the trees (<computeroutput>&quot;tree1&quot;</computeroutput>, <computeroutput>&quot;tree2&quot;</computeroutput>, etc), each containing a list of child nodes for the edges (<computeroutput>&quot;pc1&quot;</computeroutput>, <computeroutput>&quot;pc2&quot;</computeroutput>, etc). See <ref refid="classvinecopulib_1_1_bicop_1a74397cf5f843f5aebb436a49322dd2f9" kindref="member">Bicop::to_ptree()</ref> for the encoding of pair-copulas.</para><para><simplesect kind="return"><para>the boost::property_tree::ptree object containing the copula. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="77" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="246" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1acab8a34d8f89da6be0ab6ae77427c09f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::to_json</definition>
        <argsstring>(const char *filename) const</argsstring>
        <name>to_json</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>write the copula object into a JSON file. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classvinecopulib_1_1_vinecop_1aaee91f92acc8402eb7358b65c8fe63f8" kindref="member">to_ptree()</ref> for the structure of the file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="79" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a0d2fae568f3d893c1c144a8034fbaf90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::select_all</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const FitControlsVinecop &amp;controls=FitControlsVinecop())</argsstring>
        <name>select_all</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref> &amp;</type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>()</defval>
        </param>
        <briefdescription>
<para>automatically fits and selects a vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para>Selection of the structure is performed using the algorithm of Dissmann, J. F., E. C. Brechmann, C. Czado, and D. Kurowicka (2013). <emphasis>Selecting and estimating regular vine copulae and application to financial returns.</emphasis> Computational Statistics &amp; Data Analysis, 59 (1), 52-69.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>nxd matrix of copula data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>the controls to the algorithm (see <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="82" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="302" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a5e6cacd0883811fcd80c772ace747c43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::select_families</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const FitControlsVinecop &amp;controls=FitControlsVinecop())</argsstring>
        <name>select_families</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref> &amp;</type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>()</defval>
        </param>
        <briefdescription>
<para>automatically selects all pair-copula families and fits all parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>nxd matrix of copula data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>the controls to the algorithm (see <ref refid="classvinecopulib_1_1_fit_controls_vinecop" kindref="compound">FitControlsVinecop</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="85" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="322" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ad4ba574fee5f39170e1a38b921a4c02f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Vinecop::pdf</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t num_threads=1) const</argsstring>
        <name>pdf</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the density function of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="21">$ n \times d $</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="133" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="638" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a7db9bc6b406d03e51f2e6e66af0f5ed1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Vinecop::cdf</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t N=1e4, const size_t num_threads=1, std::vector&lt; int &gt; seeds=std::vector&lt; int &gt;()) const</argsstring>
        <name>cdf</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>N</declname>
          <defval>1e4</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>seeds</declname>
          <defval>std::vector&lt; int &gt;()</defval>
        </param>
        <briefdescription>
<para>calculates the cumulative distribution of the vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="21">$ n \times d $</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>integer for the number of quasi-random numbers to draw to evaluate the distribution (default: 1e4). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will generate <computeroutput>n</computeroutput> samples concurrently in <computeroutput>num_threads</computeroutput> batches. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>seeds to scramble the quasi-random numbers; if empty (default), the random number quasi-generator is seeded randomly. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="136" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="722" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a1221d844d9850435708f21494b80d39f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Vinecop::simulate</definition>
        <argsstring>(const size_t n, const bool qrng=false, const size_t num_threads=1, const std::vector&lt; int &gt; &amp;seeds=std::vector&lt; int &gt;()) const</argsstring>
        <name>simulate</name>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>qrng</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>seeds</declname>
          <defval>std::vector&lt; int &gt;()</defval>
        </param>
        <briefdescription>
<para>simulates from a vine copula model, see <ref refid="classvinecopulib_1_1_vinecop_1a73da79be3f0f3cb892afbd8f41dcad6b" kindref="member">inverse_rosenblatt()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qrng</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true for quasi-random numbers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will generate <computeroutput>n</computeroutput> samples concurrently in <computeroutput>num_threads</computeroutput> batches. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>seeds of the random number generator; if empty (default), the random number generator is seeded randomly. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of samples from the copula model. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="141" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="770" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a9df88fb9bcdcc420b0771a96943c7d45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Vinecop::rosenblatt</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t num_threads=1) const</argsstring>
        <name>rosenblatt</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the Rosenblatt transform for a vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para>The Rosenblatt transform converts data from this model into independent uniform variates.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="21">$ n \times d $</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="146" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="893" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a73da79be3f0f3cb892afbd8f41dcad6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Vinecop::inverse_rosenblatt</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t num_threads=1) const</argsstring>
        <name>inverse_rosenblatt</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the inverse Rosenblatt transform for a vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para>The inverse Rosenblatt transform can be used for simulation: the function applied to independent uniform variates resembles simulated data from the vine copula model.</para><para>If the problem is too large, it is split recursively into halves (w.r.t. n, the number of observations). &quot;Too large&quot; means that the required memory will exceed 1 GB. An examplary configuration requiring less than 1 GB is <formula id="30">$ n = 1000 $</formula>, <formula id="31">$d = 200$</formula>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="21">$ n \times d $</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="148" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="980" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a2b4b1151c5b0a817811628aa59de7eea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::calculate_npars</definition>
        <argsstring>() const</argsstring>
        <name>calculate_npars</name>
        <briefdescription>
<para>returns sum of the number of parameters for all pair copulas (see <ref refid="classvinecopulib_1_1_bicop_1a8e6b3e3dd484d07cafeb24ca3393f5f0" kindref="member">Bicop::calculate_npars()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="152" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="873" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a07e9c59b42d0668df5fc5e69b281272e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::loglik</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t num_threads=1) const</argsstring>
        <name>loglik</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the log-likelihood. </para>        </briefdescription>
        <detaileddescription>
<para>The log-likelihood is defined as <formula id="24">\[ \mathrm{loglik} = \sum_{i = 1}^n \ln c(U_{1, i}, ..., U_{d, i}), \]</formula> where <formula id="8">$ c $</formula> is the copula density <ref refid="classvinecopulib_1_1_vinecop_1ad4ba574fee5f39170e1a38b921a4c02f" kindref="member">pdf()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="25">$n \times d$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="154" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="799" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a082d0c740fcb5610c8d7687cf12a95e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::aic</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t num_threads=1) const</argsstring>
        <name>aic</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the Akaike information criterion (AIC). </para>        </briefdescription>
        <detaileddescription>
<para>The AIC is defined as <formula id="9">\[ \mathrm{AIC} = -2\, \mathrm{loglik} + 2 p, \]</formula> where <formula id="10">$ \mathrm{loglik} $</formula> is the log-liklihood and <formula id="11">$ p $</formula> is the (effective) number of parameters of the model, see <ref refid="classvinecopulib_1_1_vinecop_1a07e9c59b42d0668df5fc5e69b281272e" kindref="member">loglik()</ref> and <ref refid="classvinecopulib_1_1_vinecop_1a2b4b1151c5b0a817811628aa59de7eea" kindref="member">calculate_npars()</ref>. The AIC is a consistent model selection criterion for nonparametric models.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="156" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="818" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a61745ef0b908f6580a5af8fb40221869" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::bic</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const size_t num_threads=1) const</argsstring>
        <name>bic</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the Bayesian information criterion (BIC). </para>        </briefdescription>
        <detaileddescription>
<para>The BIC is defined as <formula id="12">\[ \mathrm{BIC} = -2\, \mathrm{loglik} + \ln(n) p, \]</formula> where <formula id="10">$ \mathrm{loglik} $</formula> is the log-liklihood and <formula id="11">$ p $</formula> is the (effective) number of parameters of the model, see <ref refid="classvinecopulib_1_1_vinecop_1a07e9c59b42d0668df5fc5e69b281272e" kindref="member">loglik()</ref> and <ref refid="classvinecopulib_1_1_vinecop_1a2b4b1151c5b0a817811628aa59de7eea" kindref="member">calculate_npars()</ref>. The BIC is a consistent model selection criterion for nonparametric models.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="158" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="837" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1abb2e75c3531d813125dda78017f0b219" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Vinecop::mbicv</definition>
        <argsstring>(const Eigen::MatrixXd &amp;u, const double psi0, const size_t num_threads=1) const</argsstring>
        <name>mbicv</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>psi0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>calculates the modified Bayesian information criterion for vines (mBICV). </para>        </briefdescription>
        <detaileddescription>
<para>The mBICV is defined as <formula id="26">\[ \mathrm{mBICV} = -2\, \mathrm{loglik} + \ln(n) \nu, - 2 * //! \sum_{t=1}^(d - 1) \{q_t log(\psi_0^t) - (d - t - q_t) log(1 -\psi_0^t)\}\]</formula> where <formula id="10">$ \mathrm{loglik} $</formula> is the log-liklihood, <formula id="14">$ \nu $</formula> is the (effective) number of parameters of the model, <formula id="27">$ t $</formula> is the tree level <formula id="15">$ \psi_0 $</formula> is the prior probability of having a non-independence copula in the first tree, and <formula id="28">$ q_t $</formula> is the number of non-independence copulas in tree <formula id="27">$ t $</formula>; The vBIC is a consistent model selection criterion for parametric sparse vine copula models when <formula id="29">$ d = o(\sqrt{n \ln n})$</formula>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psi0</parametername>
</parameternamelist>
<parameterdescription>
<para>baseline prior probability of a non-independence copula. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of threads to use for computations; if greater than 1, the function will be applied concurrently to <computeroutput>num_threads</computeroutput> batches of <computeroutput>u</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="160" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="861" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac77812a69ccd568b7eb0c21658001640" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::truncate</definition>
        <argsstring>(size_t trunc_lvl)</argsstring>
        <name>truncate</name>
        <param>
          <type>size_t</type>
          <declname>trunc_lvl</declname>
        </param>
        <briefdescription>
<para>truncate the vine copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trunc_lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>the truncation level. If the model is already truncated at a level less than <computeroutput>trunc_lvl</computeroutput>, the function does nothing. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="166" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="1146" bodyend="1152"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac99ec5154d923ee5eb73fdad071bca46" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Bicop &gt; &gt; vinecopulib::Vinecop::make_pair_copula_store</definition>
        <argsstring>(const size_t d, const size_t trunc_lvl=std::numeric_limits&lt; size_t &gt;::max())</argsstring>
        <name>make_pair_copula_store</name>
        <param>
          <type>const size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>trunc_lvl</declname>
          <defval>std::numeric_limits&lt; size_t &gt;::max()</defval>
        </param>
        <briefdescription>
<para>initializes object for storing pair copulas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vine copula. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trunc_lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>a truncation level (optional). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A nested vector such that <computeroutput>pc_store[t][e]</computeroutput> contains a <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref>. object for the pair copula corresponding to tree <computeroutput>t</computeroutput> and edge <computeroutput>e</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="164" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="283" bodyend="289"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac92fe4b93780b56e0cce7c4f6c267bcc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::check_data_dim</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data) const</argsstring>
        <name>check_data_dim</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>checks if dimension d of the data matches the dimension of the vine. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="176" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="1079" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1afe39a71a2d1e994ce37a62f32af23245" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::check_pair_copulas_rvine_structure</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Bicop &gt;&gt; &amp;pair_copulas) const</argsstring>
        <name>check_pair_copulas_rvine_structure</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> &gt;&gt; &amp;</type>
          <declname>pair_copulas</declname>
        </param>
        <briefdescription>
<para>checks if pair copulas are compatible with the R-vine structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="177" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="1092" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1ac7004a3ed7005b039a07b08964f21c1e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::finalize_fit</definition>
        <argsstring>(const tools_select::VinecopSelector &amp;selector)</argsstring>
        <name>finalize_fit</name>
        <param>
          <type>const tools_select::VinecopSelector &amp;</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="180" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="1116" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a8f7f8ed74b29c8463e4c00c0a80b563d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::check_weights_size</definition>
        <argsstring>(const Eigen::VectorXd &amp;weights, const Eigen::MatrixXd &amp;data) const</argsstring>
        <name>check_weights_size</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>checks if weights are compatible with the data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="181" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="1126" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_vinecop_1a80b44198828ac97bc82e11965c8597a7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Vinecop::check_enough_data</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data) const</argsstring>
        <name>check_enough_data</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>checks if data size is large enough </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/vinecop/class.hpp" line="183" column="1" bodyfile="include/vinecopulib/vinecop/implementation/class.ipp" bodystart="1135" bodyend="1140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class for vine copula models. </para>    </briefdescription>
    <detaileddescription>
<para>A vine copula model is characterized by the structure matrix (see <ref refid="classvinecopulib_1_1_triangular_array" kindref="compound">TriangularArray</ref>) and the pair-copulas. </para>    </detaileddescription>
    <location file="include/vinecopulib/vinecop/class.hpp" line="19" column="1" bodyfile="include/vinecopulib/vinecop/class.hpp" bodystart="18" bodyend="184"/>
    <listofallmembers>
      <member refid="classvinecopulib_1_1_vinecop_1a082d0c740fcb5610c8d7687cf12a95e4" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>aic</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a61745ef0b908f6580a5af8fb40221869" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>bic</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a08e91a1c33e21b07d708d89adac01078" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>calculate_mbicv_penalty</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a2b4b1151c5b0a817811628aa59de7eea" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>calculate_npars</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a7db9bc6b406d03e51f2e6e66af0f5ed1" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>cdf</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac92fe4b93780b56e0cce7c4f6c267bcc" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>check_data_dim</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a80b44198828ac97bc82e11965c8597a7" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>check_enough_data</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1afe39a71a2d1e994ce37a62f32af23245" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>check_pair_copulas_rvine_structure</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a8f7f8ed74b29c8463e4c00c0a80b563d" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>check_weights_size</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1aea1f8be4ac7bf48af1f186fbaf96530b" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>d_</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac7004a3ed7005b039a07b08964f21c1e" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>finalize_fit</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a08fcd0fce480d68c47932fd4d68e5478" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_aic</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ab8a6a5d111b80788955438e1630f04c9" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_all_families</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a5f1c76c0fd97ea586b182f7996034e86" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_all_pair_copulas</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1adbd6c2e57666bcec101bc2cc8846c78b" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_all_parameters</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a45dd56984cf7395494ed3fab75c62a1e" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_all_rotations</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac271e64e1b2dd16f8b5ccaecf3f03e96" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_all_taus</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a29d0beb8d6c20c246c7b86f38d90e48d" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_bic</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a27e9d72fa28b4d167dde9ae9205ec995" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_dim</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a5c909eae77a38558d46d6d4b98564e57" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_family</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a1525e0fbb288182518230ede06db1801" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_loglik</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1aab1af57bb6b7e02029dcc3dc2a285314" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_matrix</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ad694a38fd514fe339e00a00093b5aa33" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_mbicv</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a2260191b027249666f637dae58795a47" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_nobs</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a4aff71e7b65688ff04205ec66b34473e" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_order</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a5a75b825ad6091d734dc163c3277b36b" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_pair_copula</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a16872eaecac2cf3f90c7f282c453fe58" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_parameters</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a889a0c1c5c143e32cf34aa9bd15e33b6" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_rotation</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1aeaaad4d204e86a0df21becfa26032e47" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_rvine_structure</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a4d0f5a7e4b60e6d58aef3020577aeb5a" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_struct_array</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a3f4cc62395a9ae4ce2b7714ceae6bde3" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_tau</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a1b8f3b15053e1d84b13b262e9833552d" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_threshold</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a508971cf99ce5a94712168d10b736812" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>get_trunc_lvl</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a73da79be3f0f3cb892afbd8f41dcad6b" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>inverse_rosenblatt</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a07e9c59b42d0668df5fc5e69b281272e" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>loglik</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a671f2c116ae39979f1c3a79489d247ab" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>loglik_</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac99ec5154d923ee5eb73fdad071bca46" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>make_pair_copula_store</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1abb2e75c3531d813125dda78017f0b219" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>mbicv</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ae4402f2d6c3cb7001207ede73743024d" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>nobs_</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1af206b4d5e82d91f0d78b176870e422d5" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>pair_copulas_</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ad4ba574fee5f39170e1a38b921a4c02f" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>pdf</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a9df88fb9bcdcc420b0771a96943c7d45" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>rosenblatt</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a0d2fae568f3d893c1c144a8034fbaf90" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>select_all</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a5e6cacd0883811fcd80c772ace747c43" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>select_families</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a1221d844d9850435708f21494b80d39f" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>simulate</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a3ed8d7fe44fef03e738cd2561df8d58c" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>threshold_</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1acab8a34d8f89da6be0ab6ae77427c09f" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>to_json</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1aaee91f92acc8402eb7358b65c8fe63f8" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>to_ptree</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac77812a69ccd568b7eb0c21658001640" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>truncate</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a1bd2b00a31f3d14d1ad51d493286f0d2" prot="private" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>vine_struct_</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a16aff724dab68fe606e372208abe6e0f" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a391541e2795d06a848d5a17fe3496a63" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1abebc47fd9c68aeff199a3eba370a5f6a" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a2cb5079a1a3cfe0403969aba92092ac3" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1af54ae0403aaa188052c63e959e70f90f" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a6f41f3f14cd479a62bef7448c00376d0" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1abc94737980ef5dbdc16b7d0aa66e683d" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ae15da62d7cd3829bbd2980fe4ac190b0" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a8b389e32ae8d1a2c26046a6be19040f0" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac8e2119b7cd9d2f67a8a62e7b4fbd61f" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a228e7c92a06fbf7020870eec625a0e80" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ae91e02b92cd4af43596131cce9b085d9" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1ac77c6f78b0e2c7860d7406c9ea7fe251" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
      <member refid="classvinecopulib_1_1_vinecop_1a83e7fdc7c3aef45d8431005b5d1abb83" prot="public" virt="non-virtual"><scope>vinecopulib::Vinecop</scope><name>Vinecop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
