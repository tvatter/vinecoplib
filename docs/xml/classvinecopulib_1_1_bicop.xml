<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classvinecopulib_1_1_bicop" kind="class" language="C++" prot="public">
    <compoundname>vinecopulib::Bicop</compoundname>
    <includes refid="bicop_2class_8hpp" local="no">class.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Getters and setters</header>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a31b9242bfcff783cff12d1eb89ab82a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevinecopulib_1a42e95cc06d33896199caab0c11ad44f3" kindref="member">BicopFamily</ref></type>
        <definition>BicopFamily vinecopulib::Bicop::get_family</definition>
        <argsstring>() const</argsstring>
        <name>get_family</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="40" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1afee990e7396b869a168e8508c56cb7f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vinecopulib::Bicop::get_family_name</definition>
        <argsstring>() const</argsstring>
        <name>get_family_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="42" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1acefff1101f5f2c11731fd887c875e105" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int vinecopulib::Bicop::get_rotation</definition>
        <argsstring>() const</argsstring>
        <name>get_rotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="44" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a3243687fb4b9b7c02dfbc53b22e24203" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Bicop::get_parameters</definition>
        <argsstring>() const</argsstring>
        <name>get_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="46" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a1ac4b29df47b0a09bb8afa230b0eca88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::get_tau</definition>
        <argsstring>() const</argsstring>
        <name>get_tau</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="48" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a9707a32d415b6df6f4b70550ce5279b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::get_loglik</definition>
        <argsstring>() const</argsstring>
        <name>get_loglik</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="50" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="397" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a8bd6cde26ce8c9ac335b7bb181033d90" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t vinecopulib::Bicop::get_nobs</definition>
        <argsstring>() const</argsstring>
        <name>get_nobs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="51" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="407" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a1f76279f4bf59b754c51444cab71bf22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::get_aic</definition>
        <argsstring>() const</argsstring>
        <name>get_aic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="52" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="416" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a956526f702664b6c821fa6fd7d900ae5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::get_bic</definition>
        <argsstring>() const</argsstring>
        <name>get_bic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="53" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="427" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a4fd7c3b3ef2960d24b87da8c838df055" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::get_mbic</definition>
        <argsstring>(const double psi0) const</argsstring>
        <name>get_mbic</name>
        <param>
          <type>const double</type>
          <declname>psi0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="54" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="438" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a53be89bcc576f0192fe2690af3f6d93c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::set_rotation</definition>
        <argsstring>(const int rotation)</argsstring>
        <name>set_rotation</name>
        <param>
          <type>const int</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="56" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="463" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ac8d1d4266b0fd7e2f971d0149f881ef9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::set_parameters</definition>
        <argsstring>(const Eigen::MatrixXd &amp;parameters)</argsstring>
        <name>set_parameters</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="58" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="470" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a0ed8eae71586aefd61b0289be4749322" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::compute_mbic_penalty</definition>
        <argsstring>(const size_t nobs, const double psi0) const</argsstring>
        <name>compute_mbic_penalty</name>
        <param>
          <type>const size_t</type>
          <declname>nobs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>psi0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="133" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="448" bodyend="456"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Utilities</header>
      <description><para>useful functions for bivariate copulas </para></description>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a8d0b6ed59b962d1349c1c2d49b17ccab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vinecopulib::Bicop::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
<para>summarizes the model into a string (can be used for printing). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="111" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="500" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a59b7087b3857350df25ff684ab96f377" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::flip</definition>
        <argsstring>()</argsstring>
        <name>flip</name>
        <briefdescription>
<para>adjust&apos;s the copula model to a change in the variable order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="119" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="483" bodyend="497"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvinecopulib_1_1_bicop_1adeb7facfc26e94b0ad2013e144f0ec0c" prot="private" static="no" mutable="no">
        <type>BicopPtr</type>
        <definition>BicopPtr vinecopulib::Bicop::bicop_</definition>
        <argsstring></argsstring>
        <name>bicop_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="137" column="1" bodyfile="include/vinecopulib/bicop/class.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_bicop_1a8730514d4d92ef8ec400a3336d5f1f4d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int vinecopulib::Bicop::rotation_</definition>
        <argsstring></argsstring>
        <name>rotation_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="138" column="1" bodyfile="include/vinecopulib/bicop/class.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvinecopulib_1_1_bicop_1ac2b04fc8aae2b9c9adb86152c5dc5e6a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t vinecopulib::Bicop::nobs_</definition>
        <argsstring></argsstring>
        <name>nobs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="139" column="1" bodyfile="include/vinecopulib/bicop/class.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ad9b900b5d0ad9ba3d4a95a114b322291" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Bicop::Bicop</definition>
        <argsstring>(const BicopFamily family=BicopFamily::indep, const int rotation=0, const Eigen::MatrixXd &amp;parameters=Eigen::MatrixXd())</argsstring>
        <name>Bicop</name>
        <param>
          <type>const <ref refid="namespacevinecopulib_1a42e95cc06d33896199caab0c11ad44f3" kindref="member">BicopFamily</ref></type>
          <declname>family</declname>
          <defval><ref refid="namespacevinecopulib_1a42e95cc06d33896199caab0c11ad44f3af49b022096e968010a7b9bd941805a65" kindref="member">BicopFamily::indep</ref></defval>
        </param>
        <param>
          <type>const int</type>
          <declname>rotation</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>parameters</declname>
          <defval>Eigen::MatrixXd()</defval>
        </param>
        <briefdescription>
<para>creates a specific bivariate copula model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>the copula family. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>the rotation of the copula; one of 0, 90, 180, or 270 (for Independence, Gaussian, Student, Frank, and nonparametric families, only 0 is allowed). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the copula parameters. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="23" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="22" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ac439ded27a50239db5f94b4d8b1d7641" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Bicop::Bicop</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;data, const FitControlsBicop &amp;controls=FitControlsBicop())</argsstring>
        <name>Bicop</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref> &amp;</type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref>()</defval>
        </param>
        <briefdescription>
<para>create a copula model from the data, equivalent to <computeroutput><ref refid="classvinecopulib_1_1_bicop" kindref="compound">Bicop</ref> cop; cop.select(data, controls)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="classvinecopulib_1_1_bicop_1a40e37a67480de2990821580eb09ba354" kindref="member">select()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="classvinecopulib_1_1_bicop_1a40e37a67480de2990821580eb09ba354" kindref="member">select()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="27" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1aebe3a41e3f23817f0234fa789c443a98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Bicop::Bicop</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>Bicop</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>creates from a JSON file </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the JSON file to read (see <ref refid="classvinecopulib_1_1_bicop_1a74397cf5f843f5aebb436a49322dd2f9" kindref="member">to_ptree()</ref> for the structure of the file). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="30" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a48720b451adb23ede4147d4d355f4eaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vinecopulib::Bicop::Bicop</definition>
        <argsstring>(const boost::property_tree::ptree input)</argsstring>
        <name>Bicop</name>
        <param>
          <type>const boost::property_tree::ptree</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>creates from a boost::property_tree::ptree object </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>the boost::property_tree::ptree object to convert from (see <ref refid="classvinecopulib_1_1_bicop_1a74397cf5f843f5aebb436a49322dd2f9" kindref="member">to_ptree()</ref> for the structure of the input). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="32" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="49" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a74397cf5f843f5aebb436a49322dd2f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::property_tree::ptree</type>
        <definition>boost::property_tree::ptree vinecopulib::Bicop::to_ptree</definition>
        <argsstring>() const</argsstring>
        <name>to_ptree</name>
        <briefdescription>
<para>Convert the copula into a boost::property_tree::ptree object. </para>        </briefdescription>
        <detaileddescription>
<para>The boost::property_tree::ptree is contains of three values named <computeroutput>&quot;family&quot;</computeroutput>, <computeroutput>&quot;rotation&quot;</computeroutput>, <computeroutput>&quot;parameters&quot;</computeroutput>, respectively a string for the family name, an integer for the rotation, and an Eigen::MatrixXd for the parameters.</para><para><simplesect kind="return"><para>the boost::property_tree::ptree object containing the copula. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="35" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="75" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a67cec4b86ecdae9ab4bd299fcd53ab60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::to_json</definition>
        <argsstring>(const char *filename) const</argsstring>
        <name>to_json</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write the copula object into a JSON file. </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classvinecopulib_1_1_bicop_1a74397cf5f843f5aebb436a49322dd2f9" kindref="member">to_ptree()</ref> for the structure of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="37" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a6c5a0051c17e74760d4eab394245b3f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Bicop::pdf</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>pdf</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>evaluates the copula density. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The copula density evaluated at <computeroutput>u</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="62" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a3b0ee4b197e971f83e1d0c357c5ccdd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Bicop::cdf</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>cdf</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>evaluates the copula distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The copula distribution evaluated at <computeroutput>u</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="65" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="114" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ae6d42fab3bc19b807f41ccecfc80de46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Bicop::hfunc1</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>hfunc1</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>calculates the first h-function. </para>        </briefdescription>
        <detaileddescription>
<para>The first h-function is <formula id="1">$ h_1(u_1, u_2) = \int_0^{u_2} c(u_1, s) $</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="2">$m \times 2$</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="68" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="143" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a9bbf2e9ab9a04a45e8d98206a46b7596" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Bicop::hfunc2</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>hfunc2</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>calculates the second h-function. </para>        </briefdescription>
        <detaileddescription>
<para>The second h-function is <formula id="3">$ h_2(u_1, u_2) = \int_0^{u_1} c(s, u_2) $</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="2">$m \times 2$</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="71" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="168" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1aa4c7814cd1728ecf4c965aed5499968f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Bicop::hinv1</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>hinv1</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>calculates the inverse of <formula id="4">$ h_1 $</formula> (see <ref refid="classvinecopulib_1_1_bicop_1ae6d42fab3bc19b807f41ccecfc80de46" kindref="member">hfunc1()</ref>) w.r.t. the second argument. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="2">$m \times 2$</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="74" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="191" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a571c4e213695f805f8e0e7843f9b245b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::Bicop::hinv2</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>hinv2</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>calculates the inverse of <formula id="5">$ h_2 $</formula> (see <ref refid="classvinecopulib_1_1_bicop_1a9bbf2e9ab9a04a45e8d98206a46b7596" kindref="member">hfunc2()</ref>) w.r.t. the first argument. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="2">$m \times 2$</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="77" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="214" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a31dc185fdd1be89370088eea3fad23e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;</type>
        <definition>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; vinecopulib::Bicop::simulate</definition>
        <argsstring>(const size_t &amp;n, const bool qrng=false, const std::vector&lt; int &gt; &amp;seeds=std::vector&lt; int &gt;()) const</argsstring>
        <name>simulate</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>qrng</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>seeds</declname>
          <defval>std::vector&lt; int &gt;()</defval>
        </param>
        <briefdescription>
<para>simulates from a bivariate copula. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qrng</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true for quasi-random numbers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>seeds of the (quasi-)random number generator; if empty (default), the (quasi-)random number generator is seeded randomly. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="6">$ n \times 2 $</formula> matrix of samples from the copula model. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="80" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="243" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ac95738f7f2ec4e008404f5621030efc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::fit</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;data, const FitControlsBicop &amp;controls=FitControlsBicop())</argsstring>
        <name>fit</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref> &amp;</type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref>()</defval>
        </param>
        <briefdescription>
<para>fits a bivariate copula (with fixed family) to data. </para>        </briefdescription>
        <detaileddescription>
<para>For parametric models, two different methods are available. <computeroutput>&quot;mle&quot;</computeroutput> fits the parameters by maximum-likelihood. <computeroutput>&quot;itau&quot;</computeroutput> uses inversion of Kendall&apos;s <formula id="17">$ \tau $</formula>, but is only available for one-parameter families and the Student t copula. For the latter, there is a one-to-one transformation for the first parameter, the second is found by profile likelihood optimization (with accuracy of at least 0.5). Nonparametric families have specialized methods, no specification is required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="6">$ n \times 2 $</formula> matrix of observations contained in <formula id="20">$(0, 1)^2 $</formula>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>the controls (see <ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="86" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="533" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a40e37a67480de2990821580eb09ba354" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::select</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;data, FitControlsBicop controls=FitControlsBicop())</argsstring>
        <name>select</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref></type>
          <declname>controls</declname>
          <defval><ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref>()</defval>
        </param>
        <briefdescription>
<para>selects the best fitting model. </para>        </briefdescription>
        <detaileddescription>
<para>The function calls <ref refid="classvinecopulib_1_1_bicop_1ac95738f7f2ec4e008404f5621030efc1" kindref="member">fit()</ref> for all families in <computeroutput>family_set</computeroutput> and selecting the best fitting model by either BIC or AIC, see <ref refid="classvinecopulib_1_1_bicop_1a5ad96c73be4b32846792203a9dee1c53" kindref="member">bic()</ref> and <ref refid="classvinecopulib_1_1_bicop_1a6d5907e8fcc38c3be57712a26b562a39" kindref="member">aic()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="6">$ n \times 2 $</formula> matrix of observations contained in <formula id="20">$(0, 1)^2 $</formula>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controls</parametername>
</parameternamelist>
<parameterdescription>
<para>the controls (see <ref refid="classvinecopulib_1_1_fit_controls_bicop" kindref="compound">FitControlsBicop</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="89" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="566" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a81979ae3578ec9af1f5f956751faa63d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::loglik</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u=Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()) const</argsstring>
        <name>loglik</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
          <defval>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()</defval>
        </param>
        <briefdescription>
<para>calculates the log-likelihood. </para>        </briefdescription>
        <detaileddescription>
<para>The log-likelihood is defined as <formula id="7">\[ \mathrm{loglik} = \sum_{i = 1}^n \ln c(U_{1, i}, U_{2, i}), \]</formula> where <formula id="8">$ c $</formula> is the copula density <ref refid="classvinecopulib_1_1_bicop_1a6c5a0051c17e74760d4eab394245b3f1" kindref="member">pdf()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="93" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="266" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a6d5907e8fcc38c3be57712a26b562a39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::aic</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u=Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()) const</argsstring>
        <name>aic</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
          <defval>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()</defval>
        </param>
        <briefdescription>
<para>calculates the Akaike information criterion (AIC). </para>        </briefdescription>
        <detaileddescription>
<para>The AIC is defined as <formula id="9">\[ \mathrm{AIC} = -2\, \mathrm{loglik} + 2 p, \]</formula> where <formula id="10">$ \mathrm{loglik} $</formula> is the log-liklihood and <formula id="11">$ p $</formula> is the (effective) number of parameters of the model, see <ref refid="classvinecopulib_1_1_bicop_1a81979ae3578ec9af1f5f956751faa63d" kindref="member">loglik()</ref> and <ref refid="classvinecopulib_1_1_bicop_1a8e6b3e3dd484d07cafeb24ca3393f5f0" kindref="member">calculate_npars()</ref>. The AIC is a consistent model selection criterion for nonparametric models.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="97" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a5ad96c73be4b32846792203a9dee1c53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::bic</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u=Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()) const</argsstring>
        <name>bic</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
          <defval>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()</defval>
        </param>
        <briefdescription>
<para>calculates the Bayesian information criterion (BIC). </para>        </briefdescription>
        <detaileddescription>
<para>The BIC is defined as <formula id="12">\[ \mathrm{BIC} = -2\, \mathrm{loglik} + \ln(n) p, \]</formula> where <formula id="10">$ \mathrm{loglik} $</formula> is the log-liklihood and <formula id="11">$ p $</formula> is the (effective) number of parameters of the model, see <ref refid="classvinecopulib_1_1_bicop_1a81979ae3578ec9af1f5f956751faa63d" kindref="member">loglik()</ref> and <ref refid="classvinecopulib_1_1_bicop_1a8e6b3e3dd484d07cafeb24ca3393f5f0" kindref="member">calculate_npars()</ref>. The BIC is a consistent model selection criterion for parametric models.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="101" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a12e146f82646dbebcd12cccd82d91c00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::mbic</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u=Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;(), const double psi0=0.9) const</argsstring>
        <name>mbic</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
          <defval>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;()</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>psi0</declname>
          <defval>0.9</defval>
        </param>
        <briefdescription>
<para>calculates the modified Bayesian information criterion (mBIC). </para>        </briefdescription>
        <detaileddescription>
<para>The mBIC is defined as <formula id="13">\[ \mathrm{BIC} = -2\, \mathrm{loglik} + \nu \ln(n) //! - 2 (I log(\psi_0) + (1 - I) log(1 - \psi_0) \]</formula> where <formula id="10">$ \mathrm{loglik} $</formula> is the log-liklihood and <formula id="14">$ \nu $</formula> is the (effective) number of parameters of the model, <formula id="15">$ \psi_0 $</formula> is the prior probability of having a non-independence copula and <formula id="16">$ I $</formula> is an indicator for the family being non-independence; see <ref refid="classvinecopulib_1_1_bicop_1a81979ae3578ec9af1f5f956751faa63d" kindref="member">loglik()</ref> and <ref refid="classvinecopulib_1_1_bicop_1a8e6b3e3dd484d07cafeb24ca3393f5f0" kindref="member">calculate_npars()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="0">$n \times 2$</formula> matrix of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>psi0</parametername>
</parameternamelist>
<parameterdescription>
<para>prior probability of a non-independence copula. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="105" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="327" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a8e6b3e3dd484d07cafeb24ca3393f5f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::calculate_npars</definition>
        <argsstring>() const</argsstring>
        <name>calculate_npars</name>
        <briefdescription>
<para>returns the actual number of parameters for parameteric families. </para>        </briefdescription>
        <detaileddescription>
<para>For nonparametric families, there is a conceptually similar definition in the sense that it can be used in the calculation of fit statistics. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="113" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ac3d54d13bccaab2ab249599ee133c3c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::Bicop::parameters_to_tau</definition>
        <argsstring>(const Eigen::MatrixXd &amp;parameters) const</argsstring>
        <name>parameters_to_tau</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>converts the parameters to the Kendall&apos;s <formula id="19">$ tau $</formula> for the current family. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters (must be a valid parametrization of the current family). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="115" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="365" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a2664461e9ef54c1596a2db7d1592af20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Bicop::tau_to_parameters</definition>
        <argsstring>(const double &amp;tau) const</argsstring>
        <name>tau_to_parameters</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
<para>converts a Kendall&apos;s <formula id="17">$ \tau $</formula> to the copula parameters of the current family </para>        </briefdescription>
        <detaileddescription>
<para>(only works for one-parameter families) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>a value in <formula id="18">$ (-1, 1) $</formula>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="117" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="354" bodyend="357"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1aa777c88702169cb1419bad3ad3729f17" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Bicop::get_parameters_lower_bounds</definition>
        <argsstring>() const</argsstring>
        <name>get_parameters_lower_bounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a7602f071c93374e6d2167da4c8c344fc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::Bicop::get_parameters_upper_bounds</definition>
        <argsstring>() const</argsstring>
        <name>get_parameters_upper_bounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a714f13019476d521051ad2369d447f40" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt;</type>
        <definition>Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; vinecopulib::Bicop::cut_and_rotate</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;u) const</argsstring>
        <name>cut_and_rotate</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Data manipulations for rotated families. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="2">$m \times 2$</formula> matrix of data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The manipulated data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="126" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="647" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a68a906a148af0ed054603c6cb32731d0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::check_rotation</definition>
        <argsstring>(int rotation) const</argsstring>
        <name>check_rotation</name>
        <param>
          <type>int</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="129" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="683" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1ac18fa7c94d98c8237b8fc3a555fbaa46" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vinecopulib::Bicop::check_weights_size</definition>
        <argsstring>(const Eigen::VectorXd &amp;weights, const Eigen::MatrixXd &amp;data) const</argsstring>
        <name>check_weights_size</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="131" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="698" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classvinecopulib_1_1_bicop_1a20b5f18685dd889d9c2017635a910375" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>BicopPtr</type>
        <definition>BicopPtr vinecopulib::Bicop::get_bicop</definition>
        <argsstring>() const</argsstring>
        <name>get_bicop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/bicop/class.hpp" line="135" column="1" bodyfile="include/vinecopulib/bicop/implementation/class.ipp" bodystart="515" bodyend="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class for bivariate copula models. </para>    </briefdescription>
    <detaileddescription>
<para>The copula model is fully characterized by the family, rotation, and parameters. </para>    </detaileddescription>
    <location file="include/vinecopulib/bicop/class.hpp" line="20" column="1" bodyfile="include/vinecopulib/bicop/class.hpp" bodystart="19" bodyend="140"/>
    <listofallmembers>
      <member refid="classvinecopulib_1_1_bicop_1a6d5907e8fcc38c3be57712a26b562a39" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>aic</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a5ad96c73be4b32846792203a9dee1c53" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>bic</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ad9b900b5d0ad9ba3d4a95a114b322291" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>Bicop</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ac439ded27a50239db5f94b4d8b1d7641" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>Bicop</name></member>
      <member refid="classvinecopulib_1_1_bicop_1aebe3a41e3f23817f0234fa789c443a98" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>Bicop</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a48720b451adb23ede4147d4d355f4eaa" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>Bicop</name></member>
      <member refid="classvinecopulib_1_1_bicop_1adeb7facfc26e94b0ad2013e144f0ec0c" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>bicop_</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a8e6b3e3dd484d07cafeb24ca3393f5f0" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>calculate_npars</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a3b0ee4b197e971f83e1d0c357c5ccdd3" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>cdf</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a68a906a148af0ed054603c6cb32731d0" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>check_rotation</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ac18fa7c94d98c8237b8fc3a555fbaa46" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>check_weights_size</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a0ed8eae71586aefd61b0289be4749322" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>compute_mbic_penalty</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a714f13019476d521051ad2369d447f40" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>cut_and_rotate</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ac95738f7f2ec4e008404f5621030efc1" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>fit</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a59b7087b3857350df25ff684ab96f377" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>flip</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a1f76279f4bf59b754c51444cab71bf22" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_aic</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a956526f702664b6c821fa6fd7d900ae5" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_bic</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a20b5f18685dd889d9c2017635a910375" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_bicop</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a31b9242bfcff783cff12d1eb89ab82a7" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_family</name></member>
      <member refid="classvinecopulib_1_1_bicop_1afee990e7396b869a168e8508c56cb7f7" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_family_name</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a9707a32d415b6df6f4b70550ce5279b1" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_loglik</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a4fd7c3b3ef2960d24b87da8c838df055" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_mbic</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a8bd6cde26ce8c9ac335b7bb181033d90" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_nobs</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a3243687fb4b9b7c02dfbc53b22e24203" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_parameters</name></member>
      <member refid="classvinecopulib_1_1_bicop_1aa777c88702169cb1419bad3ad3729f17" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_parameters_lower_bounds</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a7602f071c93374e6d2167da4c8c344fc" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_parameters_upper_bounds</name></member>
      <member refid="classvinecopulib_1_1_bicop_1acefff1101f5f2c11731fd887c875e105" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_rotation</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a1ac4b29df47b0a09bb8afa230b0eca88" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>get_tau</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ae6d42fab3bc19b807f41ccecfc80de46" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>hfunc1</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a9bbf2e9ab9a04a45e8d98206a46b7596" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>hfunc2</name></member>
      <member refid="classvinecopulib_1_1_bicop_1aa4c7814cd1728ecf4c965aed5499968f" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>hinv1</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a571c4e213695f805f8e0e7843f9b245b" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>hinv2</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a81979ae3578ec9af1f5f956751faa63d" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>loglik</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a12e146f82646dbebcd12cccd82d91c00" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>mbic</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ac2b04fc8aae2b9c9adb86152c5dc5e6a" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>nobs_</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ac3d54d13bccaab2ab249599ee133c3c5" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>parameters_to_tau</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a6c5a0051c17e74760d4eab394245b3f1" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>pdf</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a8730514d4d92ef8ec400a3336d5f1f4d" prot="private" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>rotation_</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a40e37a67480de2990821580eb09ba354" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>select</name></member>
      <member refid="classvinecopulib_1_1_bicop_1ac8d1d4266b0fd7e2f971d0149f881ef9" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>set_parameters</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a53be89bcc576f0192fe2690af3f6d93c" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>set_rotation</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a31dc185fdd1be89370088eea3fad23e6" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>simulate</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a8d0b6ed59b962d1349c1c2d49b17ccab" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>str</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a2664461e9ef54c1596a2db7d1592af20" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>tau_to_parameters</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a67cec4b86ecdae9ab4bd299fcd53ab60" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>to_json</name></member>
      <member refid="classvinecopulib_1_1_bicop_1a74397cf5f843f5aebb436a49322dd2f9" prot="public" virt="non-virtual"><scope>vinecopulib::Bicop</scope><name>to_ptree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
