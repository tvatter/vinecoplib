<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevinecopulib_1_1tools__stats" kind="namespace" language="C++">
    <compoundname>vinecopulib::tools_stats</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a4f9a1f8fdbe23db916b013f7f6e500ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::simulate_uniform</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;d, std::vector&lt; int &gt; seeds)</argsstring>
        <name>simulate_uniform</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>seeds</declname>
        </param>
        <briefdescription>
<para>simulates from the multivariate uniform distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>seeds of the random number generator; if empty (default), the random number generator is seeded randomly.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of independent <formula id="22">$ \mathrm{U}[0, 1] $</formula> random variables. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="27" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="27" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1afda41507cee7cba84602e28e56cfcd99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::to_pseudo_obs</definition>
        <argsstring>(Eigen::MatrixXd x, std::string ties_method)</argsstring>
        <name>to_pseudo_obs</name>
        <param>
          <type>Eigen::MatrixXd</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ties_method</declname>
        </param>
        <briefdescription>
<para>applies the empirical probability integral transform to a data matrix. </para>        </briefdescription>
        <detaileddescription>
<para>Gives pseudo-observations from the copula by applying the empirical distribution function (scaled by n + 1) to each margin/column.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>a matrix of real numbers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ties_method</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates how to treat ties; same as in R, see <ulink url="https://stat.ethz.ch/R-manual/R-devel/library/base/html/rank.html">https://stat.ethz.ch/R-manual/R-devel/library/base/html/rank.html</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Psuedo-observations of the copula, i.e. F_X(X) (column-wise) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="61" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a9e4849a2a908703a68e92e0c0633237f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::tools_stats::to_pseudo_obs_1d</definition>
        <argsstring>(Eigen::VectorXd x, std::string ties_method)</argsstring>
        <name>to_pseudo_obs_1d</name>
        <param>
          <type>Eigen::VectorXd</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ties_method</declname>
        </param>
        <briefdescription>
<para>applies the empirical probability integral transform to a data vector. </para>        </briefdescription>
        <detaileddescription>
<para>Gives pseudo-observations from the copula by applying the empirical distribution function (scaled by n + 1) to each margin/column.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of real numbers. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ties_method</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates how to treat ties; same as in R, see <ulink url="https://stat.ethz.ch/R-manual/R-devel/library/base/html/rank.html">https://stat.ethz.ch/R-manual/R-devel/library/base/html/rank.html</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Psuedo-observations of the copula, i.e. F_X(X) (column-wise) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="80" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="80" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a95f6f6f63139c26b7114c4eb9cc22c48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vinecopulib::tools_stats::pairwise_mcor</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;x, const Eigen::VectorXd &amp;weights)</argsstring>
        <name>pairwise_mcor</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>calculates the pairwise maximum correlation coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="279" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="279" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a96499e20cf7b24c504b8d160fe753e05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::ghalton</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;d, std::vector&lt; int &gt; seeds)</argsstring>
        <name>ghalton</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>seeds</declname>
        </param>
        <briefdescription>
<para>simulates from the multivariate Generalized Halton Sequence. </para>        </briefdescription>
        <detaileddescription>
<para>For more information on Generalized Halton Sequence, see Faure, H., Lemieux, C. (2009). Generalized Halton Sequences in 2008: A Comparative Study. ACM-TOMACS 19(4), Article 15.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>seeds to scramble the quasi-random numbers; if empty (default), the quasi-random number generator is seeded randomly.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of quasi-random <formula id="22">$ \mathrm{U}[0, 1] $</formula> variables. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="301" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="301" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a9a8c8331b2eb372a4ad8a3808b4847ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::sobol</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;d, std::vector&lt; int &gt; seeds)</argsstring>
        <name>sobol</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>seeds</declname>
        </param>
        <briefdescription>
<para>simulates from the multivariate Sobol sequence. </para>        </briefdescription>
        <detaileddescription>
<para>For more information on the Sobol sequence, see S. Joe and F. Y. Kuo (2008), Constructing Sobol sequences with better two-dimensional projections, SIAM J. Sci. Comput. 30, 2635–2654.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeds</parametername>
</parameternamelist>
<parameterdescription>
<para>seeds to scramble the quasi-random numbers; if empty (default), the quasi-random number generator is seeded randomly.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of quasi-random <formula id="22">$ \mathrm{U}[0, 1] $</formula> variables. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="364" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="364" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a1e81bac0b4e1e9e0158b800a7db0d1af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::tools_stats::pbvt</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;z, int nu, double rho)</argsstring>
        <name>pbvt</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
<para>computes bivariate t probabilities. </para>        </briefdescription>
        <detaileddescription>
<para>Based on the method described by Dunnett, C.W. and M. Sobel, (1954), A bivariate generalization of Student&apos;s t-distribution with tables for certain special cases, Biometrika 41, pp. 153-169. Translated from the Fortran routines of Alan Genz (www.math.wsu.edu/faculty/genz/software/fort77/mvtdstpack.f).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="6">$ n \times 2 $</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>number of degrees of freedom. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>correlation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="23">$ n \times 1 $</formula> vector of probabilities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="454" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="454" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a6867eea2d193c7e5d78b30b9991397ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd vinecopulib::tools_stats::pbvnorm</definition>
        <argsstring>(const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;z, double rho)</argsstring>
        <name>pbvnorm</name>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, 2 &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
<para>compute bivariate normal probabilities. </para>        </briefdescription>
        <detaileddescription>
<para>A function for computing bivariate normal probabilities; developed using Drezner, Z. and Wesolowsky, G. O. (1989), On the Computation of the Bivariate Normal Integral, J. Stat. Comput. Simul.. 35 pp. 101-107. with extensive modications for double precisions by Alan Genz and Yihong Ge. Translated from the Fortran routines of Alan Genz (www.math.wsu.edu/faculty/genz/software/fort77/mvtdstpack.f).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>an <formula id="6">$ n \times 2 $</formula> matrix of evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>correlation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="23">$ n \times 1 $</formula> vector of probabilities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="588" column="1" bodyfile="include/vinecopulib/misc/implementation/tools_stats.ipp" bodystart="588" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a249880b93e82211207869f94821de440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::dnorm</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x)</argsstring>
        <name>dnorm</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Density function of the Standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation points.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of evaluated densities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="23" column="1" bodyfile="include/vinecopulib/misc/tools_stats.hpp" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1aa380a12540c4749e14049cdd0b163352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::pnorm</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x)</argsstring>
        <name>pnorm</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Distribution function of the Standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation points.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of evaluated probabilities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="35" column="1" bodyfile="include/vinecopulib/misc/tools_stats.hpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a4772a68417aa49b50e69c957db8533f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::qnorm</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x)</argsstring>
        <name>qnorm</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Quantile function of the Standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation points.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of evaluated quantiles. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="47" column="1" bodyfile="include/vinecopulib/misc/tools_stats.hpp" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1abc09bc02add2d7b7781aa42a406be7d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::dt</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x, double nu)</argsstring>
        <name>dt</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Density function of the Student t distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>degrees of freedom parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of evaluated densities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="60" column="1" bodyfile="include/vinecopulib/misc/tools_stats.hpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a1f65dc25a8284fe4629f092969e2861a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::pt</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x, double nu)</argsstring>
        <name>pt</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Distribution function of the Student t distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>degrees of freedom parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of evaluated probabilities. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="73" column="1" bodyfile="include/vinecopulib/misc/tools_stats.hpp" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1a17eb427c3a562c72d2e87438da1cd279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::qt</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x, double nu)</argsstring>
        <name>qt</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Quantile function of the Student t distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>evaluation points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>degrees of freedom parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <formula id="21">$ n \times d $</formula> matrix of evaluated quantiles. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="86" column="1" bodyfile="include/vinecopulib/misc/tools_stats.hpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacevinecopulib_1_1tools__stats_1ae2eca8e0fc4ac2d7eeb0226845214847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd vinecopulib::tools_stats::dependence_matrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x, const std::string &amp;measure)</argsstring>
        <name>dependence_matrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>measure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vinecopulib/misc/tools_stats.hpp" line="105" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utilities for statistical analysis. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/vinecopulib/misc/implementation/tools_stats.ipp" line="16" column="1"/>
  </compounddef>
</doxygen>
